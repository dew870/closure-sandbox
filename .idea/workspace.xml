<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="ffc9e601-fade-433e-8f18-92e081e4899d" name="Default Changelist" comment="" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="DepsLocalSettings">
    <option name="repoId" value="" />
    <option name="repoUrl" value="" />
  </component>
  <component name="ProjectId" id="1biQKsOJvLfYhA02jTlRIexLp2i" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">
    <property name="RunOnceActivity.OpenProjectViewOnStart" value="true" />
    <property name="RunOnceActivity.ShowReadmeOnStart" value="true" />
    <property name="last_opened_file_path" value="$PROJECT_DIR$/project.clj" />
    <property name="settings.editor.selected.configurable" value="reference.settingsdialog.IDE.editor.colors.Clojure" />
  </component>
  <component name="ReplState" timestamp="1590180329243">{:repl-history {:ide [], :local [{:command &quot;(:use org.httpkit.server)&quot;, :offset 25, :ns &quot;test-x.core&quot;} {:command &quot;(use org.httpkit.server)&quot;, :offset 24, :ns &quot;test-x.core&quot;} {:command &quot;(:require [datascript.core :as d])&quot;, :offset 34, :ns &quot;test-x.core&quot;} {:command &quot;(use 'datascript.core)&quot;, :offset 22, :ns &quot;test-x.core&quot;} {:command &quot;(ns test-x.core\n  (:require [hiccup.core :as hiccup])\n  (:require [datascript.core :as d])\n  (:require [org.httpkit.server :as s]))\n(use 'hiccup.core)\n\n;(use 'datascript.core)\n;(use org.httpkit.server)\n\n(defn -main\n  [&amp; args]\n  ;(html [:div {:class \&quot;welcome\&quot;} \&quot;Hi Hung Kings!\&quot;])\n  ;(get-data)\n  )\n\n(defn handler [req]\n  {:status 200\n   :headers {\&quot;Content-Type\&quot; \&quot;text/html\&quot;}\n   :body \&quot;&lt;h1&gt;HI ALL!!&lt;/h1&gt;\&quot;})\n\n(defn create-server []\n  (s/run-server handler {:port 8080}))\n\n(defn get-data [] (let [schema {:name {:db/cardinality :db.cardinality/many}}\n      conn   (d/create-conn schema)]\n  (d/transact! conn [ { :db/id 1\n                       :name  \&quot;Container-45\&quot;\n                       :empty-space   500\n                       :arrival   \&quot;2020-06-20\&quot;\n                       :departure   \&quot;2020-06-28\&quot;}\n                     { :db/id 2\n                      :name  \&quot;Container-56\&quot;\n                      :empty-space   1200\n                      :arrival   \&quot;2020-06-23\&quot;\n                      :departure   \&quot;2020-06-25\&quot;}\n                     { :db/id 3\n                      :name  \&quot;Container-99\&quot;\n                      :empty-space   400\n                      :arrival   \&quot;2020-05-20\&quot;\n                      :departure   \&quot;2020-07-22\&quot;}])\n  (d/q '[ :find  ?n ?es\n         :where [1]\n         ;:where [?es :empty-space 500]\n         [?e :name ?n]\n         [?e :empty-space ?es]\n          ]\n       @conn)))\n\n(:use org.httpkit.server)\n(defn app [req]\n  {:status  200\n   :headers {\&quot;Content-Type\&quot; \&quot;text/html\&quot;}\n   :body    \&quot;hello HTTP!\&quot;})\n(run-server app {:port 8080})\n\n\n\n\n\n\n&quot;, :offset 1558, :ns &quot;test-x.core&quot;} {:command &quot;(defn app [req]\n  {:status  200\n   :headers {\&quot;Content-Type\&quot; \&quot;text/html\&quot;}\n   :body    \&quot;hello HTTP!\&quot;})&quot;, :offset 100, :ns &quot;test-x.core&quot;} {:command &quot;(run-server app {:port 8080})&quot;, :offset 29, :ns &quot;test-x.core&quot;} {:command &quot;(require test-x.core :as c)&quot;, :offset 27, :ns &quot;test-x.core&quot;} {:command &quot;(require '[test-x.core :as c])&quot;, :offset 30, :ns &quot;test-x.core&quot;} {:command &quot;(def server (c/create-server))&quot;, :offset 30, :ns &quot;test-x.core&quot;} {:command &quot;(defn create-server []\n  (s/run-server handler {:port 8080}))&quot;, :offset 61, :ns &quot;test-x.core&quot;} {:command &quot;(c/create-server)&quot;, :offset 17, :ns &quot;test-x.core&quot;} {:command &quot;(s/run-server handler {:port 9999})&quot;, :offset 35, :ns &quot;test-x.core&quot;} {:command &quot;(ns test-x.core\n  (:require [hiccup.core :as hiccup])\n  (:require [datascript.core :as d])\n  (:require [org.httpkit.server :as s]))\n(use 'hiccup.core)\n\n;(use 'datascript.core)\n;(use org.httpkit.server)\n\n(defn -main\n  [&amp; args]\n  ;(html [:div {:class \&quot;welcome\&quot;} \&quot;Hi Hung Kings!\&quot;])\n  println (get-data)\n  )\n\n(defn handler [req]\n  {:status 200\n   :headers {\&quot;Content-Type\&quot; \&quot;text/html\&quot;}\n   :body \&quot;&lt;h1&gt;HI ALL!!&lt;/h1&gt;\&quot;})\n\n(defn create-server []\n  (s/run-server handler {:port 9999}))\n\n(defn get-data [] (let [schema {:name {:db/cardinality :db.cardinality/many}}\n      conn   (d/create-conn schema)]\n  (d/transact! conn [ { :db/id 1\n                       :name  \&quot;Container-45\&quot;\n                       :empty-space   500\n                       :arrival   \&quot;2020-06-20\&quot;\n                       :departure   \&quot;2020-06-28\&quot;}\n                     { :db/id 2\n                      :name  \&quot;Container-56\&quot;\n                      :empty-space   1200\n                      :arrival   \&quot;2020-06-23\&quot;\n                      :departure   \&quot;2020-06-25\&quot;}\n                     { :db/id 3\n                      :name  \&quot;Container-99\&quot;\n                      :empty-space   400\n                      :arrival   \&quot;2020-05-20\&quot;\n                      :departure   \&quot;2020-07-22\&quot;}])\n  (d/q '[ :find  ?n ?es\n         :where [1]\n         ;:where [?es :empty-space 500]\n         [?e :name ?n]\n         [?e :empty-space ?es]\n          ]\n       @conn)))\n\n(:use org.httpkit.server)\n(defn app [req]\n  {:status  200\n   :headers {\&quot;Content-Type\&quot; \&quot;text/html\&quot;}\n   :body    \&quot;hello HTTP!\&quot;})\n(run-server app {:port 8080})\n\n\n\n\n\n\n&quot;, :offset 1565, :ns &quot;test-x.core&quot;} {:command &quot;(handler)&quot;, :offset 9, :ns &quot;test-x.core&quot;} {:command &quot;\&quot;AAAA\&quot;&quot;, :offset 6, :ns &quot;test-x.core&quot;} {:command &quot;(defn -main\n  [&amp; args]\n  ;(html [:div {:class \&quot;welcome\&quot;} \&quot;Hi Hung Kings!\&quot;])\n  ;println (get-data)\n  println \&quot;AAAA\&quot;\n  )&quot;, :offset 118, :ns &quot;test-x.core&quot;} {:command &quot;(-main)&quot;, :offset 7, :ns &quot;test-x.core&quot;} {:command &quot;(defn -main\n  [&amp; args]\n  ;(html [:div {:class \&quot;welcome\&quot;} \&quot;Hi Hung Kings!\&quot;])\n  ;println (get-data)\n  ;println \&quot;AAAA\&quot;\n  (get-data)\n  )&quot;, :offset 132, :ns &quot;test-x.core&quot;} {:command &quot;(defn -main\n  [&amp; args]\n  ;(html [:div {:class \&quot;welcome\&quot;} \&quot;Hi Hung Kings!\&quot;])\n  ;println (get-data)\n  ;println \&quot;AAAA\&quot;\n  println (get-data)\n  )&quot;, :offset 140, :ns &quot;test-x.core&quot;} {:command &quot;(ns test-x.core\n  (:require [hiccup.core :as hiccup]\n            [datascript.core :as d]\n            [org.httpkit.server :as s]))\n\n;(use 'hiccup.core)\n\n;(use 'datascript.core)\n;(use org.httpkit.server)\n\n(defn -main\n  [&amp; args]\n  ;(html [:div {:class \&quot;welcome\&quot;} \&quot;Hi Hung Kings!\&quot;])\n  ;println (get-data)\n  ;println \&quot;AAAA\&quot;\n  )\n\n(defn handler [req]\n  {:status 200\n   :headers {\&quot;Content-Type\&quot; \&quot;text/html\&quot;}\n   :body \&quot;&lt;h1&gt;HI ALL!!&lt;/h1&gt;\&quot;})\n\n(defn create-server []\n  (s/run-server handler {:port 9999}))\n\n(defn get-data [] (let [schema {:name {:db/cardinality :db.cardinality/many}}\n      conn   (d/create-conn schema)]\n  (d/transact! conn [ { :db/id 1\n                       :name  \&quot;Container-45\&quot;\n                       :empty-space   500\n                       :arrival   \&quot;2020-06-20\&quot;\n                       :departure   \&quot;2020-06-28\&quot;}\n                     { :db/id 2\n                      :name  \&quot;Container-56\&quot;\n                      :empty-space   1200\n                      :arrival   \&quot;2020-06-23\&quot;\n                      :departure   \&quot;2020-06-25\&quot;}\n                     { :db/id 3\n                      :name  \&quot;Container-99\&quot;\n                      :empty-space   400\n                      :arrival   \&quot;2020-05-20\&quot;\n                      :departure   \&quot;2020-07-22\&quot;}])\n  (d/q '[ :find  ?n ?es\n         :where [1]\n         ;:where [?es :empty-space 500]\n         [?e :name ?n]\n         [?e :empty-space ?es]\n          ]\n       @conn)))\n\n(:use org.httpkit.server)\n(defn app [req]\n  {:status  200\n   :headers {\&quot;Content-Type\&quot; \&quot;text/html\&quot;}\n   :body    \&quot;hello HTTP!\&quot;})\n(run-server app {:port 8080})\n\n\n\n\n\n\n&quot;, :offset 1584, :ns &quot;test-x.core&quot;} {:command &quot;(defn create-server []\n  (s/run-server handler {:port 9999}))&quot;, :offset 61, :ns &quot;test-x.core&quot;} {:command &quot;(test-x.core/create-server)&quot;, :offset 27, :ns &quot;test-x.core&quot;} {:command &quot;(defn -main\n  [&amp; args]\n  ;(html [:div {:class \&quot;welcome\&quot;} \&quot;Hi Hung Kings!\&quot;])\n  ;println (get-data)\n  ;println \&quot;AAAA\&quot;\n  (create-server)\n  )&quot;, :offset 137, :ns &quot;test-x.core&quot;} {:command &quot;(ns test-x.core\n  (:require [hiccup.core :as hiccup]\n            [datascript.core :as d]\n            [org.httpkit.server :as s]))\n\n;(use 'hiccup.core)\n\n;(use 'datascript.core)\n;(use org.httpkit.server)\n\n(defn -main\n  [&amp; args]\n  ;(html [:div {:class \&quot;welcome\&quot;} \&quot;Hi Hung Kings!\&quot;])\n  ;println (get-data)\n  ;println \&quot;AAAA\&quot;\n  (create-server)\n  )\n\n(defn handler [req]\n  {:status 200\n   :headers {\&quot;Content-Type\&quot; \&quot;text/html\&quot;}\n   :body \&quot;&lt;h1&gt;HI ALL!!&lt;/h1&gt;\&quot;})\n\n(defn create-server []\n  (s/run-server handler {:port 9999}))\n\n(defn get-data [] (let [schema {:name {:db/cardinality :db.cardinality/many}}\n      conn   (d/create-conn schema)]\n  (d/transact! conn [ { :db/id 1\n                       :name  \&quot;Container-45\&quot;\n                       :empty-space   500\n                       :arrival   \&quot;2020-06-20\&quot;\n                       :departure   \&quot;2020-06-28\&quot;}\n                     { :db/id 2\n                      :name  \&quot;Container-56\&quot;\n                      :empty-space   1200\n                      :arrival   \&quot;2020-06-23\&quot;\n                      :departure   \&quot;2020-06-25\&quot;}\n                     { :db/id 3\n                      :name  \&quot;Container-99\&quot;\n                      :empty-space   400\n                      :arrival   \&quot;2020-05-20\&quot;\n                      :departure   \&quot;2020-07-22\&quot;}])\n  (d/q '[ :find  ?n ?es\n         :where [1]\n         ;:where [?es :empty-space 500]\n         [?e :name ?n]\n         [?e :empty-space ?es]\n          ]\n       @conn)))\n\n(:use org.httpkit.server)\n(defn app [req]\n  {:status  200\n   :headers {\&quot;Content-Type\&quot; \&quot;text/html\&quot;}\n   :body    \&quot;hello HTTP!\&quot;})\n(run-server app {:port 8080})\n\n\n\n\n\n\n&quot;, :offset 1602, :ns &quot;test-x.core&quot;} {:command &quot;(create-server)&quot;, :offset 15, :ns &quot;test-x.core&quot;} {:command &quot;(run-server app {:port 9998})&quot;, :offset 29, :ns &quot;test-x.core&quot;} {:command &quot;(ns test-x.core\n  (:require [hiccup.core :as h]\n            [datascript.core :as d]\n            [org.httpkit.server :as s]))\n\n(defn -main\n  [&amp; args]\n  ;(app)\n  )\n\n\n(defn get-data [] (let [schema {:name {:db/cardinality :db.cardinality/many}}\n      conn   (d/create-conn schema)]\n  (d/transact! conn [ { :db/id 1\n                       :name  \&quot;Container-45\&quot;\n                       :empty-space   500\n                       :arrival   \&quot;2020-06-20\&quot;\n                       :departure   \&quot;2020-06-28\&quot;}\n                     { :db/id 2\n                      :name  \&quot;Container-56\&quot;\n                      :empty-space   1200\n                      :arrival   \&quot;2020-06-23\&quot;\n                      :departure   \&quot;2020-06-25\&quot;}\n                     { :db/id 3\n                      :name  \&quot;Container-99\&quot;\n                      :empty-space   400\n                      :arrival   \&quot;2020-05-20\&quot;\n                      :departure   \&quot;2020-07-22\&quot;}])\n  (d/q '[ :find  ?n ?es\n         :where [1]\n         ;:where [?es :empty-space 500]\n         [?e :name ?n]\n         [?e :empty-space ?es]\n          ]\n       @conn)))\n\n(defn app [req]\n  {:status  200\n   :headers {\&quot;Content-Type\&quot; \&quot;text/html\&quot;}\n   :body    h/html [:span {:class \&quot;foo\&quot;} \&quot;bar\&quot;]})\n(s/run-server app {:port 9998})\n\n\n\n\n\n\n&quot;, :offset 1251, :ns &quot;test-x.core&quot;} {:command &quot;(defn app [req]\n  {:status  200\n   :headers {\&quot;Content-Type\&quot; \&quot;text/html\&quot;}\n   :body    h/html [:span {:class \&quot;foo\&quot;} \&quot;bar\&quot;]})&quot;, :offset 122, :ns &quot;test-x.core&quot;} {:command &quot;(html [:span {:class \&quot;foo\&quot;} \&quot;bar\&quot;])&quot;, :offset 35, :ns &quot;test-x.core&quot;} {:command &quot;(h/html [:span {:class \&quot;foo\&quot;} \&quot;bar\&quot;])&quot;, :offset 37, :ns &quot;test-x.core&quot;} {:command &quot;(defn app [req]\n  {:status  200\n   :headers {\&quot;Content-Type\&quot; \&quot;text/html\&quot;}\n   :body    (h/html  [:span {:class \&quot;foo\&quot;} \&quot;bar\&quot;])})&quot;, :offset 125, :ns &quot;test-x.core&quot;} {:command &quot;(ns test-x.core\n  (:require [hiccup.core :as h]\n            [datascript.core :as d]\n            [org.httpkit.server :as s]))\n\n(defn -main\n  [&amp; args]\n  ;(app)\n  )\n\n\n(defn get-data [] (let [schema {:name {:db/cardinality :db.cardinality/many}}\n      conn   (d/create-conn schema)]\n  (d/transact! conn [ { :db/id 1\n                       :name  \&quot;Container-45\&quot;\n                       :empty-space   500\n                       :arrival   \&quot;2020-06-20\&quot;\n                       :departure   \&quot;2020-06-28\&quot;}\n                     { :db/id 2\n                      :name  \&quot;Container-56\&quot;\n                      :empty-space   1200\n                      :arrival   \&quot;2020-06-23\&quot;\n                      :departure   \&quot;2020-06-25\&quot;}\n                     { :db/id 3\n                      :name  \&quot;Container-99\&quot;\n                      :empty-space   400\n                      :arrival   \&quot;2020-05-20\&quot;\n                      :departure   \&quot;2020-07-22\&quot;}])\n  (d/q '[ :find  ?n ?es\n         :where [1]\n         ;:where [?es :empty-space 500]\n         [?e :name ?n]\n         [?e :empty-space ?es]\n          ]\n       @conn)))\n\n(defn app [req]\n  {:status  200\n   :headers {\&quot;Content-Type\&quot; \&quot;text/html\&quot;}\n   ;   :body    (h/html  [:span {:class \&quot;foo\&quot;} \&quot;bar\&quot;])\n   (h/html [:ul\n          (for [x (map get-data :name)]\n            [:li x])])\n\n   })\n(s/run-server app {:port 9998})\n\n\n\n\n\n\n&quot;, :offset 1342, :ns &quot;test-x.core&quot;} {:command &quot;(h/html [:ul\n          (for [x (map get-data :name)]\n            [:li x])])&quot;, :offset 75, :ns &quot;test-x.core&quot;} {:command &quot;(h/html [:ul\n         (for [x (map get-data :name)]\n           [:li x])])&quot;, :offset 73, :ns &quot;test-x.core&quot;} {:command &quot;(h/html [:ul\n         (for [x (map (get-data) :name)]\n           [:li x])])&quot;, :offset 75, :ns &quot;test-x.core&quot;} {:command &quot;(map (get-data) :name)&quot;, :offset 22, :ns &quot;test-x.core&quot;} {:command &quot;(map (get-data) name)&quot;, :offset 21, :ns &quot;test-x.core&quot;} {:command &quot;(doseq [[k x] (get-data)]\n  (println k \&quot;:\&quot; x))&quot;, :offset 46, :ns &quot;test-x.core&quot;} {:command &quot;(doseq [[name space] (get-data)]\n  (println name \&quot;:\&quot; space))&quot;, :offset 60, :ns &quot;test-x.core&quot;} {:command &quot;(doseq [[name space] (get-data)]\n  (:li name))&quot;, :offset 46, :ns &quot;test-x.core&quot;} {:command &quot;(doseq [[name space] (get-data)]\n  (println name))&quot;, :offset 50, :ns &quot;test-x.core&quot;} {:command &quot;(h/html [:ul\n          (doseq [[name space] (get-data)]\n            (name))])&quot;, :offset 77, :ns &quot;test-x.core&quot;} {:command &quot;(h/html [:ul\n          (doseq [[name space] (get-data)]\n            (:li name))])&quot;, :offset 81, :ns &quot;test-x.core&quot;} {:command &quot;(range 1 4)&quot;, :offset 11, :ns &quot;test-x.core&quot;} {:command &quot;(for [x (range 1 4)]\n  [:li x])])&quot;, :offset 33, :ns &quot;test-x.core&quot;} {:command &quot;(for [x (range 1 4)]\n  [:li x])&quot;, :offset 31, :ns &quot;test-x.core&quot;} {:command &quot;(for [x [1 2 3 4 5]]\n  [:li x])&quot;, :offset 31, :ns &quot;test-x.core&quot;} {:command &quot;(get-data)&quot;, :offset 10, :ns &quot;test-x.core&quot;} {:command &quot;(map get-data :name)&quot;, :offset 20, :ns &quot;test-x.core&quot;} {:command &quot;(map get-data first)&quot;, :offset 20, :ns &quot;test-x.core&quot;} {:command &quot;(map get-data)&quot;, :offset 14, :ns &quot;test-x.core&quot;} {:command &quot;(map :first get-data)&quot;, :offset 12, :ns &quot;test-x.core&quot;} {:command &quot;(map first get-data)&quot;, :offset 5, :ns &quot;test-x.core&quot;} {:command &quot;(first (get-data))&quot;, :offset 18, :ns &quot;test-x.core&quot;} {:command &quot;(first (first (get-data)))&quot;, :offset 25, :ns &quot;test-x.core&quot;} {:command &quot;(for [x (first (get-data))]\n  [:li x])&quot;, :offset 38, :ns &quot;test-x.core&quot;} {:command &quot;(for [x ((first get-data))]\n  [:li x])\n&quot;, :offset 39, :ns &quot;test-x.core&quot;} {:command &quot;(for [x ( get-data)]\n  [:li first])&quot;, :offset 35, :ns &quot;test-x.core&quot;} {:command &quot;(for [x ( get-data)]\n  [:li (first first) ])&quot;, :offset 44, :ns &quot;test-x.core&quot;} {:command &quot;(for [x ( get-data)]\n  [:li (first) ])&quot;, :offset 38, :ns &quot;test-x.core&quot;} {:command &quot;(for [x (get-data)]\n  [:li (first) ])&quot;, :offset 37, :ns &quot;test-x.core&quot;} {:command &quot;(for [x (get-data)]\n  [:li first ])&quot;, :offset 35, :ns &quot;test-x.core&quot;} {:command &quot;(for [x (get-data)]\n  [:li x ])&quot;, :offset 31, :ns &quot;test-x.core&quot;} {:command &quot;(for [x (get-data)]\n  [:li (first x) ])&quot;, :offset 39, :ns &quot;test-x.core&quot;} {:command &quot;(h/html [:ul\n          (for [x (get-data)]\n            [:li (first x) ])])&quot;, :offset 74, :ns &quot;test-x.core&quot;} {:command &quot;(app 10)&quot;, :offset 8, :ns &quot;test-x.core&quot;} {:command &quot;(defn -main\n  [&amp; args]\n  (app 10)\n  )&quot;, :offset 37, :ns &quot;test-x.core&quot;} {:command &quot;(d/q '[ :find  ?n ?es\n         :where [1]\n         ;:where [?es :empty-space 500]\n         [?e :name ?n]\n         [?e :empty-space ?es]\n          ]\n       @conn)&quot;, :offset 161, :ns &quot;test-x.core&quot;} {:command &quot;(let [schema {:name {:db/cardinality :db.cardinality/many}}\n      conn   (d/create-conn schema)]\n  (d/transact! conn [ { :db/id 1\n                       :name  \&quot;Container-45\&quot;\n                       :empty-space   500\n                       :arrival   \&quot;2020-06-20\&quot;\n                       :departure   \&quot;2020-06-28\&quot;}\n                     { :db/id 2\n                      :name  \&quot;Container-56\&quot;\n                      :empty-space   1200\n                      :arrival   \&quot;2020-06-23\&quot;\n                      :departure   \&quot;2020-06-25\&quot;}\n                     { :db/id 3\n                      :name  \&quot;Container-99\&quot;\n                      :empty-space   400\n                      :arrival   \&quot;2020-05-20\&quot;\n                      :departure   \&quot;2020-07-22\&quot;}])\n  (d/q '[ :find  ?n ?es\n         :where [1]\n         ;:where [?es :empty-space 500]\n         [?e :name ?n]\n         [?e :empty-space ?es]\n          ]\n       @conn))&quot;, :offset 905, :ns &quot;test-x.core&quot;} {:command &quot;(defn get-data [] (let [schema {:name {:db/cardinality :db.cardinality/many}}\n      conn   (d/create-conn schema)]\n  (d/transact! conn [ { :db/id 1\n                       :name  \&quot;Container-45\&quot;\n                       :empty-space   500\n                       :arrival   \&quot;2020-06-20\&quot;\n                       :departure   \&quot;2020-06-28\&quot;}\n                     { :db/id 2\n                      :name  \&quot;Container-56\&quot;\n                      :empty-space   1200\n                      :arrival   \&quot;2020-06-23\&quot;\n                      :departure   \&quot;2020-06-25\&quot;}\n                     { :db/id 3\n                      :name  \&quot;Container-99\&quot;\n                      :empty-space   400\n                      :arrival   \&quot;2020-05-20\&quot;\n                      :departure   \&quot;2020-07-22\&quot;}])\n  (d/q '[ :find  ?n ?es\n         :where [1]\n         ;:where [?es :empty-space 500]\n         [?e :name ?n]\n         [?e :empty-space ?es]\n          ]\n       @conn)))\n\n(defn app [req]\n  {:status  200\n   :headers {\&quot;Content-Type\&quot; \&quot;text/html\&quot;}\n   :body (h/html [:ul\n                  (for [x (get-data)]\n                    [:li (first x) ])])\n\n   })&quot;, :offset 1105, :ns &quot;test-x.core&quot;} {:command &quot;(ns test-x.core\n  (:require [hiccup.core :as h]\n            [datascript.core :as d]\n            [org.httpkit.server :as s]))&quot;, :offset 124, :ns &quot;test-x.core&quot;} {:command &quot;(defn app [req]\n  {:status  200\n   :headers {\&quot;Content-Type\&quot; \&quot;text/html\&quot;}\n   :body (h/html [:ul\n                  (for [x (get-data)]\n                    [:li (first x) ])])\n\n   })\n&quot;, :offset 180, :ns &quot;test-x.core&quot;} {:command &quot;(defn get-data [] (let [schema {:name {:db/cardinality :db.cardinality/many}}\n      conn   (d/create-conn schema)]\n  (d/transact! conn [ { :db/id 1\n                       :name  \&quot;Container-45\&quot;\n                       :empty-space   500\n                       :arrival   \&quot;2020-06-20\&quot;\n                       :departure   \&quot;2020-06-28\&quot;}\n                     { :db/id 2\n                      :name  \&quot;Container-56\&quot;\n                      :empty-space   1200\n                      :arrival   \&quot;2020-06-23\&quot;\n                      :departure   \&quot;2020-06-25\&quot;}\n                     { :db/id 3\n                      :name  \&quot;Container-99\&quot;\n                      :empty-space   400\n                      :arrival   \&quot;2020-05-20\&quot;\n                      :departure   \&quot;2020-07-22\&quot;}])\n  (d/q '[ :find  ?n ?es\n         :where [1]\n         ;:where [?es :empty-space 500]\n         [?e :name ?n]\n         [?e :empty-space ?es]\n          ]\n       @conn)))&quot;, :offset 924, :ns &quot;test-x.core&quot;} {:command &quot;(defn app [req]\n  {:status  200\n   :headers {\&quot;Content-Type\&quot; \&quot;text/html\&quot;}\n   :body (h/html [:ul\n                  (for [x (get-data)]\n                    [:li (first x) ])])\n\n   })&quot;, :offset 179, :ns &quot;test-x.core&quot;} {:command &quot;(defn -main\n  [&amp; args]\n  (s/run-server app {:port 9998}))&quot;, :offset 57, :ns &quot;test-x.core&quot;} {:command &quot;(defn app [req]\n  {:status  200\n   :headers {\&quot;Content-Type\&quot; \&quot;text/html\&quot;}\n   :body (h/html [:ul\n                  (for [x (get-data)]\n                    [:li (str first x last x) ])])\n\n   })&quot;, :offset 190, :ns &quot;test-x.core&quot;} {:command &quot;(s/run-server app {:port 9998})&quot;, :offset 31, :ns &quot;test-x.core&quot;} {:command &quot;(for [x (get-data)]\n                    [:li (str first x last x) ])&quot;, :offset 68, :ns &quot;test-x.core&quot;} {:command &quot;(for [x (get-data)]\n                    [:li (first x) ])&quot;, :offset 57, :ns &quot;test-x.core&quot;} {:command &quot;(for [x (get-data)]\n                    [:li (last x) ])&quot;, :offset 56, :ns &quot;test-x.core&quot;} {:command &quot;[:ul\n                  (for [x (get-data)]\n                    [:li (str (first x) \&quot;: \&quot; (last x)) \&quot; space left\&quot;  ])]&quot;, :offset 116, :ns &quot;test-x.core&quot;} {:command &quot;(for [x (get-data)]\n                    [:li (str (first x)  \&quot;:\&quot; (last x)) \&quot; space left\&quot;  ])&quot;, :offset 92, :ns &quot;test-x.core&quot;} {:command &quot;(for [x (get-data)]\n                    [:li (str (first x)  \&quot;: \&quot; (last x)) \&quot; space left\&quot;  ])&quot;, :offset 93, :ns &quot;test-x.core&quot;} {:command &quot;(for [x (get-data)]\n                    [:li (str (first x)  \&quot;: \&quot; (last x)) \&quot;space left\&quot;  ])&quot;, :offset 92, :ns &quot;test-x.core&quot;} {:command &quot;(for [x (get-data)]\n                    [:li (str (first x)  \&quot;: \&quot; (last x)) str (\&quot;space left\&quot;)  ])&quot;, :offset 98, :ns &quot;test-x.core&quot;} {:command &quot;[:li (str (first x)  \&quot;: \&quot; (last x)) str (\&quot;space left\&quot;)  ]&quot;, :offset 57, :ns &quot;test-x.core&quot;} {:command &quot;(for [x (get-data)]\n                    [:li (str (first x)  \&quot;: \&quot; (last x)) (str \&quot; space left\&quot;)  ])&quot;, :offset 99, :ns &quot;test-x.core&quot;} {:command &quot;[:li (str (first x)  \&quot;: \&quot; (last x)) (str space left)  ]&quot;, :offset 55, :ns &quot;test-x.core&quot;} {:command &quot;(for [x (get-data)]\n                    [:li (str (first x)  \&quot;: \&quot; (last x)) ])&quot;, :offset 78, :ns &quot;test-x.core&quot;} {:command &quot;(str (first x)  \&quot; | space: \&quot; (last x))&quot;, :offset 38, :ns &quot;test-x.core&quot;} {:command &quot;[:li (str (first x)  \&quot; | space: \&quot; (last x)) ]&quot;, :offset 45, :ns &quot;test-x.core&quot;} {:command &quot;[:li (str (first x)  \&quot;: \&quot; (last x)) ]&quot;, :offset 37, :ns &quot;test-x.core&quot;} {:command &quot;(last x)&quot;, :offset 8, :ns &quot;test-x.core&quot;} {:command &quot;[:li (str (first x) \&quot;: space\&quot; (last x)) ]&quot;, :offset 41, :ns &quot;test-x.core&quot;} {:command &quot;(for [x (get-data)]\n                    [:li (str (first x) \&quot;: space\&quot; (last x)) ])&quot;, :offset 82, :ns &quot;test-x.core&quot;} {:command &quot;(for [x (get-data)]\n                    [:li (str (first x) \&quot;: space \&quot; (last x)) ])&quot;, :offset 83, :ns &quot;test-x.core&quot;} {:command &quot;(for [x (get-data)]\n                    [:li (str (first x) \&quot;| space \&quot; (last x)) ])&quot;, :offset 83, :ns &quot;test-x.core&quot;} {:command &quot;(for [x (get-data)]\n                    [:li (str (first x) \&quot; | space: \&quot; (last x)) ])&quot;, :offset 85, :ns &quot;test-x.core&quot;} {:command &quot;(defn app [req]\n  {:status  200\n   :headers {\&quot;Content-Type\&quot; \&quot;text/html\&quot;}\n   :body (h/html [:ul\n                  (for [x (get-data)]\n                    [:li (str (first x) \&quot; | space: \&quot; (last x)) ])]\n                 )\n\n   })&quot;, :offset 225, :ns &quot;test-x.core&quot;}], :remote []}}</component>
  <component name="RunManager" selected="Clojure Application.core">
    <configuration name="Repl" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <module name="test-x" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="fixLineNumbers" value="false" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="fixLineNumbers" value="false" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <setting name="host" value="" />
      <setting name="port" value="0" />
      <setting name="replType" value="SOCKET" />
      <setting name="configType" value="SPECIFY" />
      <setting name="fixLineNumbers" value="false" />
      <method v="2" />
    </configuration>
    <configuration name="core" type="ClojureScriptRunConfiguration" factoryName="Clojure Script" temporary="true">
      <module name="test-x" />
      <setting name="path" value="$PROJECT_DIR$/src/test_x/core.clj" />
      <setting name="namespace" value="" />
      <setting name="execution" value="INTELLIJ" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="vmparams" value="" />
      <setting name="params" value="" />
      <setting name="workDir" value="$PROJECT_DIR$/src/test_x" />
      <method v="2" />
    </configuration>
    <list>
      <item itemvalue="Clojure Application.core" />
      <item itemvalue="Clojure REPL.Repl" />
    </list>
    <recent_temporary>
      <list>
        <item itemvalue="Clojure Application.core" />
      </list>
    </recent_temporary>
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="ffc9e601-fade-433e-8f18-92e081e4899d" name="Default Changelist" comment="" />
      <created>1589112373117</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1589112373117</updated>
    </task>
    <servers />
  </component>
  <component name="WindowStateProjectService">
    <state x="414" y="175" key="#com.intellij.execution.impl.EditConfigurationsDialog" timestamp="1590153639549">
      <screen x="0" y="0" width="1920" height="1040" />
    </state>
    <state x="414" y="175" key="#com.intellij.execution.impl.EditConfigurationsDialog/0.0.1920.1040@0.0.1920.1040" timestamp="1590153639549" />
    <state x="735" y="322" key="#com.intellij.fileTypes.FileTypeChooser" timestamp="1590174320027">
      <screen x="0" y="0" width="1920" height="1040" />
    </state>
    <state x="735" y="322" key="#com.intellij.fileTypes.FileTypeChooser/0.0.1920.1040@0.0.1920.1040" timestamp="1590174320027" />
    <state x="740" y="237" key="FileChooserDialogImpl" timestamp="1590153340579">
      <screen x="0" y="0" width="1920" height="1040" />
    </state>
    <state x="740" y="237" key="FileChooserDialogImpl/0.0.1920.1040@0.0.1920.1040" timestamp="1590153340579" />
    <state width="1572" height="170" key="GridCell.Tab.0.bottom" timestamp="1590179055991">
      <screen x="0" y="0" width="1920" height="1040" />
    </state>
    <state width="1572" height="170" key="GridCell.Tab.0.bottom/0.0.1920.1040@0.0.1920.1040" timestamp="1590179055991" />
    <state width="1572" height="170" key="GridCell.Tab.0.center" timestamp="1590179055991">
      <screen x="0" y="0" width="1920" height="1040" />
    </state>
    <state width="1572" height="170" key="GridCell.Tab.0.center/0.0.1920.1040@0.0.1920.1040" timestamp="1590179055991" />
    <state width="1572" height="170" key="GridCell.Tab.0.left" timestamp="1590179055991">
      <screen x="0" y="0" width="1920" height="1040" />
    </state>
    <state width="1572" height="170" key="GridCell.Tab.0.left/0.0.1920.1040@0.0.1920.1040" timestamp="1590179055991" />
    <state width="1572" height="170" key="GridCell.Tab.0.right" timestamp="1590179055991">
      <screen x="0" y="0" width="1920" height="1040" />
    </state>
    <state width="1572" height="170" key="GridCell.Tab.0.right/0.0.1920.1040@0.0.1920.1040" timestamp="1590179055991" />
    <state width="1254" height="266" key="GridCell.Tab.1.bottom" timestamp="1590159546834">
      <screen x="0" y="0" width="1920" height="1040" />
    </state>
    <state width="1254" height="266" key="GridCell.Tab.1.bottom/0.0.1920.1040@0.0.1920.1040" timestamp="1590159546834" />
    <state width="1254" height="266" key="GridCell.Tab.1.center" timestamp="1590159546834">
      <screen x="0" y="0" width="1920" height="1040" />
    </state>
    <state width="1254" height="266" key="GridCell.Tab.1.center/0.0.1920.1040@0.0.1920.1040" timestamp="1590159546834" />
    <state width="1254" height="266" key="GridCell.Tab.1.left" timestamp="1590159546834">
      <screen x="0" y="0" width="1920" height="1040" />
    </state>
    <state width="1254" height="266" key="GridCell.Tab.1.left/0.0.1920.1040@0.0.1920.1040" timestamp="1590159546834" />
    <state width="1254" height="266" key="GridCell.Tab.1.right" timestamp="1590159546834">
      <screen x="0" y="0" width="1920" height="1040" />
    </state>
    <state width="1254" height="266" key="GridCell.Tab.1.right/0.0.1920.1040@0.0.1920.1040" timestamp="1590159546834" />
    <state x="295" y="363" key="NewModule_or_Project.wizard" timestamp="1589112715354">
      <screen x="0" y="0" width="1920" height="1040" />
    </state>
    <state x="295" y="363" key="NewModule_or_Project.wizard/0.0.1920.1040@0.0.1920.1040" timestamp="1589112715354" />
    <state x="696" y="186" key="SettingsEditor" timestamp="1590157187372">
      <screen x="0" y="0" width="1920" height="1040" />
    </state>
    <state x="696" y="186" key="SettingsEditor/0.0.1920.1040@0.0.1920.1040" timestamp="1590157187372" />
    <state x="1045" y="134" key="com.intellij.openapi.editor.actions.MultiplePasteAction$ClipboardContentChooser" timestamp="1590157537424">
      <screen x="0" y="0" width="1920" height="1040" />
    </state>
    <state x="1045" y="134" key="com.intellij.openapi.editor.actions.MultiplePasteAction$ClipboardContentChooser/0.0.1920.1040@0.0.1920.1040" timestamp="1590157537424" />
  </component>
</project>